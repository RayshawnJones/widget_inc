"""
Django settings for widgetstore project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR is the directory containing manage.py
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# This key is used for cryptographic signing, and should be kept secret in production environments
SECRET_KEY = 'django-insecure-k&-dfh_fk=d*33gv-89drfqzpvjurx95xf#z4j4($^#_2u^$kq'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG mode should be set to False in production for security reasons
DEBUG = True

# Allowed hosts specifies a list of strings representing the host/domain names that this Django site can serve.
# Add your server's IP address or domain name here
ALLOWED_HOSTS = ['3.14.175.247']

# REST framework settings
# Allow any permissions to simplify access during development
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ]
}

# APPEND_SLASH ensures URLs without a trailing slash are redirected to the same URL with a trailing slash.
APPEND_SLASH = True

# Application definition

# Installed apps contains a list of all Django applications that are activated in this Django instance.
# This includes default apps as well as any custom apps.
INSTALLED_APPS = [
    'django.contrib.admin',  # Admin site
    'django.contrib.auth',  # Authentication framework
    'django.contrib.contenttypes',  # Content type framework
    'django.contrib.sessions',  # Session framework
    'django.contrib.messages',  # Messaging framework
    'django.contrib.staticfiles',  # Framework for serving static files
    'widgets',  # Custom app for widgets
    'corsheaders',  # CORS headers for cross-origin requests
    'rest_framework',  # Django REST framework
]

# Middleware is a list of middleware classes to be used by the Django request/response processing.
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Handles CORS headers
    'django.middleware.security.SecurityMiddleware',  # Security middleware
    'django.contrib.sessions.middleware.SessionMiddleware',  # Session middleware
    'django.middleware.common.CommonMiddleware',  # Common middleware
    'django.middleware.csrf.CsrfViewMiddleware',  # Cross-site request forgery protection
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Authentication middleware
    'django.contrib.messages.middleware.MessageMiddleware',  # Messaging middleware
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Clickjacking protection
]

# Allow all origins for CORS during development
CORS_ALLOW_ALL_ORIGINS = True

# Root URL configuration
ROOT_URLCONF = 'widgetstore.urls'

# Templates configuration
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',  # Template backend to use
        'DIRS': [],  # Directories to search for templates
        'APP_DIRS': True,  # Whether to look for templates in app directories
        'OPTIONS': {
            'context_processors': [  # Context processors to use
                'django.template.context_processors.debug',  # Adds debug context variable
                'django.template.context_processors.request',  # Adds request context variable
                'django.contrib.auth.context_processors.auth',  # Adds user and perms context variables
                'django.contrib.messages.context_processors.messages',  # Adds messages context variable
            ],
        },
    },
]

# WSGI application configuration
WSGI_APPLICATION = 'widgetstore.wsgi.application'


# Database configuration
# Using SQLite for simplicity in development
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # Database engine
        'NAME': BASE_DIR / 'db.sqlite3',  # Database name/path
    }
}


# Password validation
# Validators for checking the strength of user passwords
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # Prevents using attributes of the user
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # Ensures a minimum password length
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # Prevents common passwords
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # Prevents passwords that are entirely numeric
    },
]


# Internationalization settings
# Language and timezone settings
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True  # Enables Django's translation system

USE_TZ = True  # Enables timezone support


# Static files (CSS, JavaScript, Images)
# URL to use when referring to static files
STATIC_URL = 'static/'

# Default primary key field type
# Default auto field type for primary keys in models
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
